# question no:1
# i.
animals = ['Lion' , 'Tiger' , 'Element' , 'Giraffe' , 'Zebra']
print(animals[0:4])
print(animals[-2::1])
# ii.
animals[3]=animals[1]



# question no:2
# i.
temperatures = [22,18,25,20,17,23,21]
print(temperatures)
# ii.
mx = temperatures.index(max(temperatures))
mn = temperatures.index(min(temperatures))
temperatures[mx] , temperatures[mn] = temperatures[mn] , temperatures[mx]
# iii.
print("After Swap the max element with the min element: ")
print(temperatures)




# question no:3
# i.
list1 = list(map(int , input("List1 : ").split(' ')))
list2 = list(map(int , input("List2 : ").split(' ')))

def printCommon(list1 , list2):
    common = []
    for i in list1:
        if(i in list2):
            common.append(i)
    return common

print(f"The common elements of list1 and list2 are : \n {printCommon(list1 , list2)}")

# ii.
def makeDict(list1):
    dict={}
    for i in list1:
        dict[i]=i**3
    return dict
print(f"Result Dictionary  : \n {makeDict(list1)}")



employeeId = int(input("Enter Employee ID : "))
workPerM = float(input("Total Worked hour Per Month : "))
payPerHour = float(input("Amount recieved per hour : "))

# as total work hour for a month is given so holidays doesnot matter
print(f"Employee Id : {employeeId}")
print(f"Total Salary of a month : {workPerM*payPerHour:.2f}")



class Exam_controller:
    def __init__(self , cgpa , duration):
        self._cgpa = cgpa
        self.__duration = duration
    def __result(self):
        return self._cgpa
    def __exam_details(self):
        return self.__duration

class Student_info:
    def __init__(self , others_info , get_other_info):
        self.others_info = others_info
        self.get_other_info = get_other_info
    def get_student_info(self):
        return self.others_info   
    def course_taken(self):
        return self.get_other_info
    def enrolment_record(self):
        return
    

class Administration(Exam_controller , Student_info):
    def __int__(self ,accounts , cgpa  ,duration , others_info , get_other_info):
        self.__accounts = accounts
        self._cgpa = cgpa
        self.__duration = duration
        self.others_info = others_info
        self.get_other_info = get_other_info
        Student_info.__init__(self , others_info , get_other_info)
        Exam_controller.__init__(self)
        self.students = []

    def get_Stuent_info(self):
        return self.others_info
    def exam_info(self):
        return self.__accounts , self._cgpa , self.__duration
    
    def add_student(self, student):
        self.students.append(student)
    def remove_student(self, student):
        self.students.remove(student)

class Student_management:
    def __init__(self , name , id , email , admin):
        self.name = name
        self.id = id
        self.email = email
        self.admin = admin
    def get_student_info(self):
        return [ self.name , self.id , self.email ]
    def course_information(self):
        return 
    def result(self):
        __result()
        


newAdmin = Administration(1 , 3.5 , 2 , "Sifat" , "waiber is valid")
stuManager = Student_management("sifat" , 5153 , "sifat@gmail.com" , newAdmin)

# # # from new import do

# # # do("this function is not defined in that file")

# # import random 

# # n =[]
# # for v in range(0,11):
# #     n.append(random.randint(0,100))

# # for i in range(50 , 100):
# #     for j in n:
# #         if j==i:
# #             print(j , end=" ")
            

# def min_coins(total):
#     coins = [1, 3, 6, 10, 15]
#     dp = [float('inf')] * (total + 1)
#     dp[0] = 0

#     for i in range(1, total + 1):
#         for coin in coins:
#             if i - coin >= 0:
#                 dp[i] = min(dp[i], dp[i - coin] + 1)

#     return dp[total]

# for i in range(1, 31):
#     print(f"Total: {i}, Minimum coins needed: {min_coins(i)}")

def min_coins(total):
    coins = [1, 3, 6, 10, 15]
    dp = [float('inf')] * (total + 1)
    dp[0] = 0

    for i in range(1, total + 1):
        for coin in coins:
            if i - coin >= 0:
                dp[i] = min(dp[i], dp[i - coin] + 1)

    return dp[total]

result = []
for i in range(1, 31):
    result.append(min_coins(i))

print(result)

myList = [12, 23, 54.45 , "sifat"]
for i in myList:
    print(i)
print(myList)
List2 = []
n = int(input())
for i in range(n):
    ele = int(input(format(i+1)))
    List2.append(ele)
print(List2)
list3 = list(map(int , input().split(' ')))
print(list3)
list4 = [3,4,6,7,8,9,10,23,45,67,89,32]
# print(list4[4:5])
print(list4[6::1])
s = {3,4,1,2,8,6,5,4}
print(s)
s2 = {"sifat"  , "safat" , "sabbir" , "shawon" , "kabir" , "rifat" }
print(s2)
s3 = {'b' , 'c' , 'd'} 
print(s3)
l1 = [2,3,4,5,6,7,8,9,10,11,12,13]
print(l1[0::-1])    
n = int(input())
li =list(map(int,input().split(' ')))
print(5 in li)
ti = tuple(map(int , input().split(' ')))
print(ti)
li = [(3,4,5) , ("sifat" , 3 , 4.5) , (4.5 , {3,44.5} , (2,3,4))]
print(type(li[2][1]))
print(li[2][1])
dict = {"name":"sifat","age":34,"cgpa":4.43}
for x,y in dict.items():
    print(f"the key is {x} and the value is {y}")

n = int(input())
arr = list(map(int , input().split(' ')))

dict={}
for ele in arr:
    if(ele in dict):
        dict[ele]=dict[ele]+1
    else:
        dict[ele]=1

print(dict)

arr = list(map( str , input().split(' ')))
map = {}
for item in arr:
    if(item in map):
        map[item]+=1
    else:
        map[item]=1

for x,y in map.items():
    print(f"{x} occurs {y} times")

set1 = set(map(int , input().split(' ')))
print(set1)

set1 = {3,4,2,1,6,7,8}

print([i for i in set1 if i%3==0])
print([x/4*3 for x in set1 if x%2==0])




